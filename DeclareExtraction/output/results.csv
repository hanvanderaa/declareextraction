"ID";"Description";"GsSlots";"gen slots";"Correct slots";"Precision";"Recall";"# generated cons";"# gs cons";"GS type";"type error";"Actions";"Cons1";"gsCons1";"Cons2";"gsCons2";"Cons3";"gsCons3"
"0";"A claim should be created, before it can be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: create a claim, Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"1";"A claim must be created, before it is approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: create a claim, Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"2";"When a claim is created, it may be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: create a claim, Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"3";"If a claim is created, it can be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: create a claim, Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"4";"They have to create the claim, before they can approve it.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: create the claim, Action: they approve it]";"Constraint [type=PRECEDENCE, A=Action: create the claim, B=Action: they approve it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"5";"Only after a claim is created, it is possible to approve the claim.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: create a claim, Action: approve the claim]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: approve the claim]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"6";"If a claim is approved, then it must have been created first.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: approve a claim, Action: create it]";"Constraint [type=PRECEDENCE, A=Action: create it, B=Action: approve a claim]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"7";"To approve a claim, it should be created first.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: approve a claim, Action: create it]";"Constraint [type=PRECEDENCE, A=Action: create it, B=Action: approve a claim]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"8";"A claim can be approved, after it has been created.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: approve a claim, Action: create it]";"Constraint [type=PRECEDENCE, A=Action: create it, B=Action: approve a claim]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"9";"Approving the claim can happen at anytime, unless it still needs to be created.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action: approve the claim, Action: create, Action: the claim, Action: it]";"Constraint [type=PRECEDENCE, A=Action: the claim, B=Action: it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]"
"10";"Creation of the claim is required, before it can be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: approve it, Action: creation of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation of the claim, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approve claim]"
"11";"The creation of the claim is a condition for the approval of the claim.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: the creation of the claim, Action: a condition for the approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: the creation of the claim, B=Action: a condition for the approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approval claim]"
"12";"Only after the creation of a claim, the approval of the claim is possible.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: the creation of a claim, Action: the approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: the creation of a claim, B=Action: the approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approval claim]"
"13";"When approval of the claim occurs, creation of the claim must have preceded.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: approval of the claim, Action: creation of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation of the claim, B=Action: approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approval claim]"
"14";"If approval of the claim occurs, then creation of the claim must have been carried out first.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: carry then creation of the claim, Action: approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: carry then creation of the claim, B=Action: approval of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approval claim]"
"15";"The approval of the claim requires that the creation of the claim occurs before it.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action: the approval of the claim, Action: the creation of the claim]";"Constraint [type=PRECEDENCE, A=Action: the approval of the claim, B=Action: the creation of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approval claim]"
"16";"The approval of the claim should be preceded by the creation of the claim.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action: the approval of the claim, Action: the creation of the claim]";"Constraint [type=PRECEDENCE, A=Action: the approval of the claim, B=Action: the creation of the claim]";"Constraint [type=PRECEDENCE, A=Action: creation claim, B=Action: approval claim]"
"17";"A claim must be created, before it can be approved or rejected.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action: create a claim, Action: approve it, Action: reject it]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: approve claim]";"Constraint [type=PRECEDENCE, A=Action: create a claim, B=Action: reject it]";"Constraint [type=PRECEDENCE, A=Action: create claim, B=Action: reject claim]"
"18";"A claim should be approved before it can be paid out.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: approve a claim, Action: pay it]";"Constraint [type=PRECEDENCE, A=Action: approve a claim, B=Action: pay it]";"Constraint [type=PRECEDENCE, A=Action: approve claim, B=Action: pay claim]"
"19";"Once a claim has been approved, it should eventually be paid out.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: approve a claim, Action: pay it]";"Constraint [type=RESPONSE, A=Action: approve a claim, B=Action: pay it]";"Constraint [type=RESPONSE, A=Action: approve claim, B=Action: pay claim]"
"20";"Once a claim has been rejected, it should not be paid out.";"4";"4";"4";"1.0";"1.0";"1";"1";"SUCCESSION";"true";"[Action: reject a claim, Action: not pay it]";"Constraint [type=NOT-RESPONSE, A=Action: reject a claim, B=Action: pay it]";"Constraint [type=NOT-SUCCESSION, A=Action: reject claim, B=Action: pay claim]"
"21";"Payout should end the process and therefore exclude everything.";"2";"2";"2";"1.0";"1.0";"1";"1";"END";"false";"[Action: payout end the process, Action: payout exclude everything]";"Constraint [type=END, A=Action: payout exclude everything]";"Constraint [type=END, A=Action: payout]"
"22";"A case can be closed manually at any time, unless we still need to pay out the claim.";"3";"0";"0";"0.0";"0.0";"0";"1";"PRECEDENCE";"true";"[Action: close a case, Action: pay the claim, Action: we]"
"23";"The case can be managed at the union after it has been created.";"3";"0";"0";"0.0";"0.0";"0";"1";"PRECEDENCE";"true";"[Action: manage the case, Action: create it]"
"24";"After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.";"3";"0";"0";"0.0";"0.0";"0";"1";"RESPONSE";"true";"[Action: create a case, Action: management arrange a meeting between the union case worker and the other case worker]"
"25";"After a meeting is arranged it must be held.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: arrange a meeting, Action: hold it]";"Constraint [type=RESPONSE, A=Action: arrange a meeting, B=Action: hold it]";"Constraint [type=RESPONSE, A=Action: arrange meeting, B=Action: hold meeting]"
"26";"The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.";"6";"0";"0";"0.0";"0.0";"0";"2";"SUCCESSION";"true";"[Action: the case worker enter metadata, Action: the case worker inform, Action: participate, Action: the case worker submit]"
"27";"When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.";"6";"0";"0";"0.0";"0.0";"0";"2";"PRECEDENCE";"true";"[Action: submit a case, Action: it get a local id, Action: assign a case id in lo]"
"28";"When a case is submitted, LO should eventually propose dates.";"3";"0";"0";"0.0";"0.0";"0";"1";"RESPONSE";"true";"[Action: submit a case, Action: lo propose dates]"
"29";"Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.";"6";"0";"0";"0.0";"0.0";"0";"2";"PRECEDENCE";"true";"[Action: lo assign its case id, Action: id, Action: manage the case, Action: propose dates]"
"30";"Once a date has been agreed upon a meeting should eventually be held.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: agree a date, Action: hold]";"Constraint [type=RESPONSE, A=Action: agree a date, B=Action: hold]";"Constraint [type=RESPONSE, A=Action: agree date, B=Action: hold meeting]"
"31";"Every process instance starts by examining a patient.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: every process instance start, Action: examine a patient]";"Constraint [type=INIT, A=Action: examine a patient]";"Constraint [type=INIT, A=Action: examine patient]"
"32";"If an x-ray is taken, then the x-ray risk must be checked before it";"3";"3";"0";"0.0";"0.0";"1";"1";"PRECEDENCE";"true";"[Action: take an x-ray, Action: check then the x-ray risk]";"Constraint [type=RESPONSE, A=Action: take an x-ray, B=Action: check then the x-ray risk]";"Constraint [type=PRECEDENCE, A=Action: check x-ray risk, B=Action: perform x-ray risk]"
"33";"Performing a reposition, applying a cast and performing surgery require that x-rays are performed before.";"9";"3";"3";"1.0";"0.3333333333333333";"1";"3";"PRECEDENCE";"false";"[Action: perform a reposition, Action: reposition, Action: apply a cast, Action: perform surgery, Action: perform x-rays]";"Constraint [type=PRECEDENCE, A=Action: perform a reposition, B=Action: perform x-rays]";"Constraint [type=PRECEDENCE, A=Action: perform x-ray, B=Action: perform reposition]"
"34";"If a surgery is performed, then prescription of rehabilitation occurs eventually after it.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"RESPONSE";"true";"[Action: perform a surgery, Action: then prescription of rehabilitation]";"Constraint [type=PRECEDENCE, A=Action: perform a surgery, B=Action: then prescription of rehabilitation]";"Constraint [type=RESPONSE, A=Action: perform surgery, B=Action: prescribe rehabilitation]"
"35";"After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.";"3";"6";"2";"0.3333333333333333";"0.6666666666666666";"2";"1";"SUCCESSION";"false";"[Action: apply a cast, Action: remove the cast, Action: apply]";"Constraint [type=RESPONSE, A=Action: apply a cast, B=Action: apply]";"no match";"Constraint [type=PRECEDENCE, A=Action: apply a cast, B=Action: remove the cast]";"Constraint [type=SUCCESSION, A=Action: apply cast, B=Action: remove cast]"
"36";"The process begins with the booking of the ticket";"2";"2";"0";"0.0";"0.0";"1";"1";"INIT";"true";"[Action: the process begin]";"Constraint [type=EXISTENCE, A=Action: the process begin]";"Constraint [type=INIT, A=Action: book ticket]"
"37";"Personal information of passengers can be provided after the booking of the ticket";"3";"2";"0";"0.0";"0.0";"1";"1";"PRECEDENCE";"true";"[Action: provide personal information of passengers]";"Constraint [type=EXISTENCE, A=Action: provide personal information of passengers]";"Constraint [type=PRECEDENCE, A=Action: book ticket, B=Action: provide personal information]"
"38";"The payment of the ticket triggers the completion of the booking phase.";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"RESPONSE";"true";"[Action: the payment of the ticket trigger the completion of the booking phase, Action: book]";"Constraint [type=PRECEDENCE, A=Action: the payment of the ticket trigger the completion of the booking phase, B=Action: book]";"Constraint [type=RESPONSE, A=Action: payment ticket, B=Action: booking phase completion]"
"39";"The payment of the ticket is eventually followed by the actual transfer of money";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"RESPONSE";"true";"[Action: the payment of the ticket, Action: the actual transfer of money]";"Constraint [type=PRECEDENCE, A=Action: the payment of the ticket, B=Action: the actual transfer of money]";"Constraint [type=RESPONSE, A=Action: payment ticket, B=Action: money transfer]"
"40";"As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change";"4";"3";"2";"0.6666666666666666";"0.5";"1";"1";"SUCCESSION";"true";"[Action: do, Action: the check-in of the flight not take place, Action: the customers modify the provided data, Action: provide, Action: change]";"Constraint [type=PRECEDENCE, A=Action: the check-in of the flight not take place, B=Action: the customers modify the provided data]";"Constraint [type=NOT-SUCCESSION, A=Action: check-in flight, B=Action: modify provided data]"
"41";"After check-in of the flight, only the cancellation is admitted";"3";"2";"0";"0.0";"0.0";"1";"1";"PRECEDENCE";"true";"[Action: admit only the cancellation]";"Constraint [type=EXISTENCE, A=Action: admit only the cancellation]";"Constraint [type=PRECEDENCE, A=Action: check-in flight, B=Action: cancellation]"
"42";"The process starts when an invoice is received by the administration department.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: the process start, Action: receive an invoice]";"Constraint [type=INIT, A=Action: receive an invoice]";"Constraint [type=INIT, A=Action: receive invoice]"
"43";"If they decide that the invoice appears legit then they enter all relevant data into the system";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"RESPONSE";"true";"[Action: they decide, Action: the invoice appear, Action: enter all relevant data]";"Constraint [type=PRECEDENCE, A=Action: they decide, B=Action: enter all relevant data]";"Constraint [type=RESPONSE, A=Action: decide invoice legit, B=Action: enter all relevant data]"
"44";"When all necessary approvals have been received the invoice can be paid.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: receive all necessary approvals, Action: pay the invoice]";"Constraint [type=PRECEDENCE, A=Action: receive all necessary approvals, B=Action: pay the invoice]";"Constraint [type=PRECEDENCE, A=Action: receive all necessary approvals, B=Action: pay invoice]"
"45";"Once payment is confirmed, the invoice case should be closed.";"3";"0";"0";"0.0";"0.0";"0";"1";"RESPONSE";"true";"[Action: confirm payment, Action: close the invoice case]"
"46";"The receipt of an invoice is required before the administration department can enter data or scan the invoice.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action: the administration department enter data, Action: the administration department scan the invoice, Action: the receipt of an invoice]";"Constraint [type=PRECEDENCE, A=Action: the receipt of an invoice, B=Action: the administration department enter data]";"Constraint [type=PRECEDENCE, A=Action: receipt of an invoice, B=Action: enter data]";"Constraint [type=PRECEDENCE, A=Action: the receipt of an invoice, B=Action: the administration department scan the invoice]";"Constraint [type=PRECEDENCE, A=Action: receipt of an invoice, B=Action: scan invoice]"
"47";"Enter data is required before any approval can be given.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: enter, Action: give any approval, Action: enter data]";"Constraint [type=PRECEDENCE, A=Action: enter data, B=Action: give any approval]";"Constraint [type=PRECEDENCE, A=Action: enter data, B=Action: give approval]"
"48";"Finally, we have to pay the invoice before we can confirm payment.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: pay the invoice, Action: confirm payment]";"Constraint [type=PRECEDENCE, A=Action: pay the invoice, B=Action: confirm payment]";"Constraint [type=PRECEDENCE, A=Action: pay invoice, B=Action: confirm payment]"
"49";"If a request is sent, then a proposal is expected to be prepared afterwards";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"RESPONSE";"true";"[Action: send a request, Action: expect then a proposal]";"Constraint [type=PRECEDENCE, A=Action: send a request, B=Action: expect then a proposal]";"Constraint [type=RESPONSE, A=Action: send request, B=Action: prepare proposal]"
"50";"A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation ";"3";"3";"0";"0.0";"0.0";"1";"1";"SUCCESSION";"true";"[Action: suppose a confirmation, Action: give, Action: expect vice-versa any proposal, Action: a confirmation]";"Constraint [type=PRECEDENCE, A=Action: suppose a confirmation, B=Action: a confirmation]";"Constraint [type=SUCCESSION, A=Action: give confirmation, B=Action: proposal]"
"51";"Every process instance has to start by registering client data";"2";"3";"0";"0.0";"0.0";"1";"1";"INIT";"true";"[Action: start, Action: register client data]";"Constraint [type=PRECEDENCE, A=Action: start, B=Action: register client data]";"Constraint [type=INIT, A=Action: register client data]"
"52";"Every provided room service must be billed.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: provide, Action: bill every provided room service]";"Constraint [type=RESPONSE, A=Action: provide, B=Action: bill every provided room service]";"Constraint [type=RESPONSE, A=Action: provide room service, B=Action: bill]"
"53";"Every provided laundry service must be billed";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: provide, Action: bill every provided laundry service]";"Constraint [type=RESPONSE, A=Action: provide, B=Action: bill every provided laundry service]";"Constraint [type=RESPONSE, A=Action: provide laundry service, B=Action: bill]"
"54";"When the client leaves, the bill must be charged";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: the client leave, Action: charge the bill]";"Constraint [type=RESPONSE, A=Action: the client leave, B=Action: charge the bill]";"Constraint [type=RESPONSE, A=Action: leave, B=Action: charge bill]"
"55";"The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: search the police report related to the car accident, Action: put the police report related to the car accident]";"Constraint [type=PRECEDENCE, A=Action: search the police report related to the car accident, B=Action: put the police report related to the car accident]";"Constraint [type=PRECEDENCE, A=Action: search report, B=Action: put in a file together with the claim documentation]"
"56";"A customer brings in a defective computer and the manager analyzes the defect and gives back an invoice.";"6";"3";"2";"0.6666666666666666";"0.3333333333333333";"1";"2";"PRECEDENCE";"false";"[Action: a customer bring, Action: the manager analyze the defect, Action: the manager give an invoice]";"Constraint [type=PRECEDENCE, A=Action: a customer bring, B=Action: the manager give an invoice]";"Constraint [type=PRECEDENCE, A=Action: bring in a defective computer, B=Action: analyze the defect]"
"57";"After each of these activities, the proper system functionality is tested.";"5";"2";"1";"0.5";"0.2";"1";"2";"RESPONSE";"true";"[Action: test the proper system functionality]";"Constraint [type=EXISTENCE, A=Action: test the proper system functionality]";"Constraint [type=null, A=Action: ]"
"58";"If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: detect an error, Action: execute another arbitrary repair activity, Action: finish the repair]";"Constraint [type=PRECEDENCE, A=Action: detect an error, B=Action: execute another arbitrary repair activity]";"Constraint [type=PRECEDENCE, A=Action: error is detected, B=Action: execute repair activity]"
"59";"After a claim is registered, it is examined by a claims officer.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: register a claim, Action: examine it]";"Constraint [type=PRECEDENCE, A=Action: register a claim, B=Action: examine it]";"Constraint [type=PRECEDENCE, A=Action: register claim, B=Action: examine claim]"
"60";"This recommendation is then checked by a senior claims officer who may mark the claim as OK or Not OK.";"6";"3";"3";"1.0";"0.5";"1";"2";"PRECEDENCE";"false";"[Action: check this recommendation, Action: a senior claims officer who may mark the claim as ok or not ok mark]";"Constraint [type=PRECEDENCE, A=Action: check this recommendation, B=Action: a senior claims officer who may mark the claim as ok or not ok mark]";"Constraint [type=PRECEDENCE, A=Action: check recommendation, B=Action: mark as ok]"
"61";"If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.";"6";"6";"5";"0.8333333333333334";"0.8333333333333334";"2";"2";"PRECEDENCE";"false";"[Action: mark the claim, Action: send it, Action: repeat the recommendation]";"Constraint [type=PRECEDENCE, A=Action: mark the claim, B=Action: send it]";"Constraint [type=PRECEDENCE, A=Action: mark as not ok, B=Action: send it back]";"Constraint [type=PRECEDENCE, A=Action: mark the claim, B=Action: repeat the recommendation]";"Constraint [type=PRECEDENCE, A=Action: send it back, B=Action: repeat recommendation]"
"62";"If the claim is OK, the claim handling process proceeds.";"3";"2";"0";"0.0";"0.0";"1";"1";"PRECEDENCE";"true";"[Action: handle]";"Constraint [type=EXISTENCE, A=Action: handle]";"Constraint [type=PRECEDENCE, A=Action: mark as ok, B=Action: proceed with claim]"
"63";"The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.";"2";"0";"0";"0.0";"0.0";"0";"1";"INIT";"true";"[Action: buy the process of buying new hardware, Action: start the process of buying new hardware, Action: receive a request for new hardware]"
"64";"The next step is for the IT department to analyse the request and either approve or deny it.";"6";"3";"2";"0.6666666666666666";"0.3333333333333333";"1";"2";"PRECEDENCE";"false";"[Action: analyse the request, Action: approve it, Action: deny]";"Constraint [type=PRECEDENCE, A=Action: analyse the request, B=Action: deny]";"Constraint [type=PRECEDENCE, A=Action: analyze request, B=Action: deny request]"
"65";"If it is denied, the employee is informed via email about the denial and the process is ended.";"5";"5";"4";"0.8";"0.8";"2";"2";"PRECEDENCE";"false";"[Action: deny it, Action: inform the employee, Action: end the process]";"Constraint [type=PRECEDENCE, A=Action: deny it, B=Action: inform the employee]";"Constraint [type=PRECEDENCE, A=Action: deny request, B=Action: inform employee via email]";"Constraint [type=END, A=Action: deny it]";"Constraint [type=END, A=Action: inform employee via email]"
"66";"However, if the request is approved it is edited and completed.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action: approve the request, Action: edit it, Action: complete it]";"Constraint [type=PRECEDENCE, A=Action: approve the request, B=Action: edit it]";"Constraint [type=PRECEDENCE, A=Action: approve request, B=Action: edit request]";"Constraint [type=PRECEDENCE, A=Action: approve the request, B=Action: complete it]";"Constraint [type=PRECEDENCE, A=Action: approve request, B=Action: complete request]"
"67";"Once this offer is received, a form is filled in and sent to the management.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action: receive this offer, Action: fill a form, Action: send a form]";"Constraint [type=PRECEDENCE, A=Action: receive this offer, B=Action: send a form]";"Constraint [type=PRECEDENCE, A=Action: receive offer, B=Action: send to management]";"Constraint [type=PRECEDENCE, A=Action: receive this offer, B=Action: fill a form]";"Constraint [type=PRECEDENCE, A=Action: receive offer, B=Action: fill in form]"
"68";"The management then analyses the request and decides if it is approved or not.";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"PRECEDENCE";"false";"[Action: the management decide, Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: the management decide, B=Action: approve it]";"Constraint [type=PRECEDENCE, A=Action: analyze request, B=Action: decide if approved]"
"69";"When this is accepted and the financial resources are found, the hardware is received by the IT department.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action: accept this, Action: find the financial resources, Action: receive the hardware]";"Constraint [type=PRECEDENCE, A=Action: accept this, B=Action: receive the hardware]";"Constraint [type=PRECEDENCE, A=Action: this is accepted, B=Action: receive hardware by it department]";"Constraint [type=PRECEDENCE, A=Action: find the financial resources, B=Action: receive the hardware]";"Constraint [type=PRECEDENCE, A=Action: financial resourced are found, B=Action: receive hardware by it department]"
"70";"After which the financial department will take care of the invoice and the processes is ended.";"2";"2";"2";"1.0";"1.0";"1";"1";"END";"false";"[Action: the financial department take, Action: end care of the invoice and the processes]";"Constraint [type=END, A=Action: the financial department take]";"Constraint [type=END, A=Action: take care of invoice]"
"71";"In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.";"6";"3";"1";"0.3333333333333333";"0.16666666666666666";"1";"2";"PRECEDENCE";"false";"[Action: do, Action: the scenario where the management does not approve the request not approve the scenario where the management does not approve the request, Action: it send, Action: go, Action: complete]";"Constraint [type=PRECEDENCE, A=Action: go, B=Action: complete]";"Constraint [type=PRECEDENCE, A=Action: deny request, B=Action: send back request to it]"
"72";"If the management does not approve the request, it can also decide to deny the request after which the process is ended.";"7";"3";"2";"0.6666666666666666";"0.2857142857142857";"1";"2";"PRECEDENCE";"false";"[Action: do, Action: the management not approve the request, Action: it decide, Action: deny the request after which the process is ended, Action: end the request after which the process is ended]";"Constraint [type=PRECEDENCE, A=Action: the management not approve the request, B=Action: it decide]";"Constraint [type=NOT-PRECEDENCE, A=Action: approve request, B=Action: deny request]"
"73";"The loan approval process starts by receiving a customer request for a loan amount.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: the loan approval process start, Action: receive a customer request]";"Constraint [type=INIT, A=Action: receive a customer request]";"Constraint [type=INIT, A=Action: receive customer request]"
"74";"If the customer needs further review or the loan amount is for $10,000 or more, the request is sent to the approver Web service.";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"PRECEDENCE";"false";"[Action: send the request, Action: the customer]";"Constraint [type=PRECEDENCE, A=Action: the customer, B=Action: send the request]";"Constraint [type=PRECEDENCE, A=Action: need further review, B=Action: send request]"
"75";"The process of an Office Supply Request starts when any employee of the organization submits an office supply request.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: the process of an office supply request start, Action: any employee of the organization submit an office supply request]";"Constraint [type=INIT, A=Action: any employee of the organization submit an office supply request]";"Constraint [type=INIT, A=Action: submit office supply request]"
"76";"Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: register the requirement, Action: receive the request, Action: request the immediate supervisor of the employee requesting the office supplies]";"Constraint [type=PRECEDENCE, A=Action: register the requirement, B=Action: receive the request]";"Constraint [type=PRECEDENCE, A=Action: register requirement, B=Action: receive request]"
"77";"If the request is rejected, the process will end.";"2";"2";"2";"1.0";"1.0";"1";"1";"END";"false";"[Action: reject the request, Action: the process end]";"Constraint [type=END, A=Action: reject the request]";"Constraint [type=END, A=Action: reject request]"
"78";"If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.";"6";"3";"3";"1.0";"0.5";"1";"2";"PRECEDENCE";"false";"[Action: ask the request, Action: make a change, Action: return it, Action: the petitioner who can review the comments for the change request review the petitioner who can review the comments for the change request]";"Constraint [type=PRECEDENCE, A=Action: ask the request, B=Action: return it]";"Constraint [type=PRECEDENCE, A=Action: ask to make change, B=Action: return to petitioner/employee]"
"79";"If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.";"6";"3";"2";"0.6666666666666666";"0.3333333333333333";"1";"2";"PRECEDENCE";"true";"[Action: approve the request, Action: it go, Action: make the purchase department that will be in charge of making quotations -lrb- using a subprocess -rrb- and select a vendor, Action: use the purchase department that will be in charge of making quotations -lrb- using a subprocess -rrb- and select a vendor, Action: the purchase department that will be in charge of making quotations -lrb- using a subprocess -rrb- and select a vendor select the purchase department that will be in charge of making quotations -lrb- using a subprocess -rrb- and select a vendor]";"Constraint [type=RESPONSE, A=Action: approve the request, B=Action: it go]";"Constraint [type=PRECEDENCE, A=Action: approve request, B=Action: go to purchase department]"
"80";"After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.";"6";"24";"4";"0.16666666666666666";"0.6666666666666666";"8";"2";"PRECEDENCE";"false";"[Action: select a vendor, Action: confirm a vendor, Action: the system generate a purchase order, Action: the system send, Action: the system wait, Action: deliver, Action: the invoice receive]";"Constraint [type=PRECEDENCE, A=Action: select a vendor, B=Action: the system wait]";"no match";"Constraint [type=RESPONSE, A=Action: select a vendor, B=Action: the system generate a purchase order]";"no match";"Constraint [type=PRECEDENCE, A=Action: confirm a vendor, B=Action: the invoice receive]";"no match";"Constraint [type=PRECEDENCE, A=Action: confirm a vendor, B=Action: the system wait]";"no match";"Constraint [type=PRECEDENCE, A=Action: select a vendor, B=Action: the system send]";"Constraint [type=PRECEDENCE, A=Action: select vendor, B=Action: generate purchase order]";"Constraint [type=PRECEDENCE, A=Action: select a vendor, B=Action: the invoice receive]";"no match";"Constraint [type=RESPONSE, A=Action: confirm a vendor, B=Action: the system generate a purchase order]";"no match";"Constraint [type=PRECEDENCE, A=Action: confirm a vendor, B=Action: the system send]";"Constraint [type=PRECEDENCE, A=Action: confirm vendor, B=Action: geneate purchase order]"
"81";"In any of the cases, approval, rejection or change required the system will send the user a notification.";"3";"3";"0";"0.0";"0.0";"1";"1";"RESPONSE";"true";"[Action: the system send a notification, Action: approval , rejection or change]";"Constraint [type=PRECEDENCE, A=Action: the system send a notification, B=Action: approval , rejection or change]";"Constraint [type=RESPONSE, A=Action: approval, rejection, change, B=Action: send notification]"
"82";"The process starts when any employee of the organization submits a vacation request.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: the process start, Action: any employee of the organization submit a vacation request]";"Constraint [type=INIT, A=Action: any employee of the organization submit a vacation request]";"Constraint [type=INIT, A=Action: submit vacation request]"
"83";"Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: register the requirement, Action: receive the request, Action: request the immediate supervisor of the employee requesting the vacation]";"Constraint [type=PRECEDENCE, A=Action: register the requirement, B=Action: receive the request]";"Constraint [type=PRECEDENCE, A=Action: register requirement, B=Action: receive request]"
"84";"If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.";"6";"3";"3";"1.0";"0.5";"1";"2";"PRECEDENCE";"false";"[Action: reject the request, Action: return the application, Action: the applicant/employee who can review the rejection reasons review the applicant/employee who can review the rejection reasons]";"Constraint [type=PRECEDENCE, A=Action: reject the request, B=Action: return the application]";"Constraint [type=PRECEDENCE, A=Action: reject request, B=Action: return application]"
"85";"If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.";"6";"3";"3";"1.0";"0.5";"1";"2";"PRECEDENCE";"false";"[Action: approve the request, Action: generate a notification, Action: the human resources representative , who must complete the respective management procedures complete the human resources representative , who must complete the respective management procedures]";"Constraint [type=PRECEDENCE, A=Action: approve the request, B=Action: generate a notification]";"Constraint [type=PRECEDENCE, A=Action: approve request, B=Action: generate notification]"
"86";"The process starts by reviewing the order.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: the process start, Action: review the order]";"Constraint [type=INIT, A=Action: review the order]";"Constraint [type=INIT, A=Action: review order]"
"87";"If something is missing, the staff has to inform customer about a potential delay and order the missing products.";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"PRECEDENCE";"false";"[Action: something miss, Action: inform customer, Action: miss]";"Constraint [type=PRECEDENCE, A=Action: something miss, B=Action: miss]";"Constraint [type=PRECEDENCE, A=Action: inform customer, B=Action: order missing products]"
"88";"After waiting an average of x days for the delivery, the staff should check again if all products are on store.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: wait an average of x days for the delivery, Action: the staff check]";"Constraint [type=RESPONSE, A=Action: wait an average of x days for the delivery, B=Action: the staff check]";"Constraint [type=RESPONSE, A=Action: wait for x days, B=Action: check again ]"
"89";"The courier company informs the client about a potential delay until there are enough human resources to process the delivery.";"3";"0";"0";"0.0";"0.0";"0";"1";"PRECEDENCE";"true";"[Action: the courier company inform the client, Action: process enough human resources to process the delivery]"
"90";"Once the driver delivers the package, she should update the system so all stakeholders are notified.";"6";"6";"6";"1.0";"1.0";"2";"2";"RESPONSE";"false";"[Action: the driver deliver the package, Action: she update the system, Action: notify all stakeholders]";"Constraint [type=PRECEDENCE, A=Action: she update the system, B=Action: notify all stakeholders]";"Constraint [type=PRECEDENCE, A=Action: update system, B=Action: notify all stakeholders]";"Constraint [type=RESPONSE, A=Action: the driver deliver the package, B=Action: she update the system]";"Constraint [type=RESPONSE, A=Action: deliver package, B=Action: update system]"
"91";"Whenever the sales department receives an order, a new process instance is created.";"2";"0";"0";"0.0";"0.0";"0";"1";"INIT";"true";"[Action: the sales department receive an order, Action: create a new process instance]"
"92";"If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.";"9";"6";"5";"0.8333333333333334";"0.5555555555555556";"2";"3";"PRECEDENCE";"false";"[Action: the storehouse reserve every item of the part list, Action: the preparation activity finish every item of the part list, Action: the engineering department assemble the bicycle]";"Constraint [type=PRECEDENCE, A=Action: the preparation activity finish every item of the part list, B=Action: the engineering department assemble the bicycle]";"Constraint [type=SUCCESSION, A=Action: preparation activity has finished, B=Action: assemble bycicle]";"Constraint [type=PRECEDENCE, A=Action: the storehouse reserve every item of the part list, B=Action: the engineering department assemble the bicycle]";"Constraint [type=PRECEDENCE, A=Action: reserve part, B=Action: assemble bicycle]"
"93";"Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.";"2";"2";"0";"0.0";"0.0";"1";"1";"END";"true";"[Action: the sales department finish the process instance]";"Constraint [type=EXISTENCE, A=Action: the sales department finish the process instance]";"Constraint [type=END, A=Action: ship bicycle to the customer]"
"94";"If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: request, Action: the company assess the risk of the credit]";"Constraint [type=PRECEDENCE, A=Action: request, B=Action: the company assess the risk of the credit]";"Constraint [type=PRECEDENCE, A=Action: receive amount request, B=Action: assess credit risk]"
"95";"After the approval request, the credit could be accepted or rejected";"6";"3";"2";"0.6666666666666666";"0.3333333333333333";"1";"2";"PRECEDENCE";"false";"[Action: accept the credit, Action: reject the credit]";"Constraint [type=PRECEDENCE, A=Action: accept the credit, B=Action: reject the credit]";"Constraint [type=PRECEDENCE, A=Action: request approval, B=Action: reject credit]"
"96";"If the requested amount is greater than 1M$, an approval must be requested.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: request, Action: request an approval]";"Constraint [type=RESPONSE, A=Action: request, B=Action: request an approval]";"Constraint [type=RESPONSE, A=Action: receive amount request, B=Action: request approval]"
"97";"If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: request, Action: the company assess the risk of the credit]";"Constraint [type=PRECEDENCE, A=Action: request, B=Action: the company assess the risk of the credit]";"Constraint [type=PRECEDENCE, A=Action: receive amount request, B=Action: assess credit risk]"
"98";"As soon as an employee files an expense report, the process is started.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: an employee file an expense report, Action: start the process]";"Constraint [type=INIT, A=Action: an employee file an expense report]";"Constraint [type=INIT, A=Action: file expense]"
"99";"Once the expense report is received, a check is performed to make sure the employee has an account.";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"SUCCESSION";"true";"[Action: receive the expense report, Action: perform a check, Action: make]";"Constraint [type=PRECEDENCE, A=Action: receive the expense report, B=Action: perform a check]";"Constraint [type=SUCCESSION, A=Action: receive expense report, B=Action: perform check]"
"100";"If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.";"8";"3";"2";"0.6666666666666666";"0.25";"1";"2";"SUCCESSION";"true";"[Action: do, Action: this check not take place, Action: stop the process, Action: send a submit email, Action: submit]";"Constraint [type=PRECEDENCE, A=Action: this check not take place, B=Action: send a submit email]";"Constraint [type=NOT-SUCCESSION, A=Action: check take place, B=Action: send submit email]"
"101";"First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"true";"[Action: the supervisor approve, Action: this result]";"Constraint [type=RESPONSE, A=Action: the supervisor approve, B=Action: this result]";"Constraint [type=PRECEDENCE, A=Action: supervisor approves, B=Action: deposit of reimbursement]"
"102";"Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: the supervisor reject the request, Action: a result the employee receive a notification, Action: reject the request]";"Constraint [type=PRECEDENCE, A=Action: the supervisor reject the request, B=Action: a result the employee receive a notification]";"Constraint [type=PRECEDENCE, A=Action: supervisor rejects, B=Action: receives a notification]"
"103";"Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.";"3";"6";"2";"0.3333333333333333";"0.6666666666666666";"2";"1";"PRECEDENCE";"false";"[Action: it take the supervisor more than 7 days, Action: respond, Action: send an email, Action: inform the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated, Action: ask the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated, Action: repeat the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated]";"Constraint [type=PRECEDENCE, A=Action: it take the supervisor more than 7 days, B=Action: respond]";"no match";"Constraint [type=PRECEDENCE, A=Action: it take the supervisor more than 7 days, B=Action: send an email]";"Constraint [type=PRECEDENCE, A=Action: respond, B=Action: send email]"
